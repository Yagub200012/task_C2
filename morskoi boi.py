from random import randint
class BoardException(BaseException):
    pass
class BoardOutException(BaseException):
    def __str__(self):
        return "–í—ã –ø—ã—Ç–∞–µ—Ç–µ—Å—å –≤—ã—Å—Ç—Ä–µ–ª–∏—Ç—å –∑–∞ –¥–æ—Å–∫—É! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
class BoardUsedException(BaseException):
    def __str__(self):
        return "–≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
class BoardWrongShipException(BaseException):
    pass
class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __eq__(self, other):
        return self.x == other.x and self.y == other.y
    def __repr__(self):
        return [self.x, self.y]
class Ship:
    def __init__(self, length, nose, direction):
        self.length = length
        self.nose = nose
        self.direction = direction
        self.lifes = length
    def dots(self):
        dots_ship=[]
        dots_ship.append([self.nose[0], self.nose[1]])
        if self.direction == 0:
            for i in range(self.length-1):
                self.nose[0] += 1
                dots_ship.append([self.nose[0], self.nose[1]])
        elif self.direction == 1:
            for i in range(self.length-1):
                self.nose[1] += 1
                dots_ship.append([self.nose[0], self.nose[1]])
        return dots_ship
class Board:
    def __init__(self, size=6):
        self.size = size
        self.amount = 0
        self.field_1 = [["üü¶"] * size for _ in range(size)]
        self.field_2 = [["üü¶"] * size for _ in range(size)]
        self.ships = []
    def add_ship(self, shdots):
        for i in shdots:
            if self.out(i) and self.contour(shdots, 0):
                pass
            else:
                raise BoardWrongShipException()
        for i in shdots:
            self.field_2[i[0]][i[1]] = 'üö¢'
        self.amount += 1
        self.ships.append(shdots)
        return self.field_2
    def contour(self, shdots, soz_ud):
        ship_cont = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1)
        ]
        ship_cont_list=[]
        if soz_ud == 0:
            for t in shdots:
                for j in ship_cont:
                    j = [j[0] + t[0], j[1] + t[1]]
                    if (not (j in ship_cont_list)) and self.out(j):
                        ship_cont_list.append(j)
            for i in ship_cont_list:
                if self.field_2[i[0]][i[1]] == 'üö¢':
                    return False
            return self.field_2
        else:
            shot_ship = []
            for i in self.ships:
                lifsh=len(i)
                for j in i:
                    if self.field_1[j[0]][j[1]] == 'üí•':
                        lifsh -=1
                if lifsh == 0:
                    shot_ship.append(i)
                    self.amount -= 1
            for t in shot_ship:
                for i in t:
                    for j in ship_cont:
                        j = [j[0] + i[0], j[1] + i[1]]
                        if (not (j in ship_cont_list)) and self.out(j):
                            ship_cont_list.append(j)
            for i in ship_cont_list:
                if self.field_1[i[0]][i[1]] == 'üí•':
                    pass
                else:
                    self.field_1[i[0]][i[1]] = 'üö´'
                    self.field_2[i[0]][i[1]] = 'üö´'
            return self.field_1
    def board_consol(self, hid):# hid - 1, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–∫—Ä—ã—Ç—É—é –¥–æ—Å–∫—É –∏ 0 –µ—Å–ª–∏ –Ω–µ—Å–∫—Ä—ã—Ç—É—é
        if hid:
            print("  | 1  |  2  | 3  | 4  | 5  | 6  |")
            fp = 1
            for i in self.field_1:
                print(fp,'|',i[0],'|',i[1],'|',i[2],'|',i[3],'|',i[4],'|',i[5],'|')
                fp +=1
        else:
            print("  | 1  |  2  | 3  | 4  | 5  | 6  |")
            fp = 1
            for i in self.field_2:
                print(fp, '|', i[0], '|', i[1], '|', i[2], '|', i[3], '|', i[4], '|', i[5], '|')
                fp += 1
    def out(self, dot):
        if (dot[0] in range(self.size)) and (dot[1] in range(self.size)):
            return True
        return False
    def shoot(self, dot_shoot): # shep1 –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ—Ä–∞–±–ª–µ–π dot_shoot - —Ç–æ—á–∫–∞ –≤—ã—Å—Ç—Ä–µ–ª–∞
        if not self.out(dot_shoot):
            raise BoardOutException()
        elif (self.field_1[dot_shoot[0]][dot_shoot[1]] == 'üí•') or (self.field_1[dot_shoot[0]][dot_shoot[1]] == 'üö´'):
            raise BoardUsedException()
        elif self.field_1[dot_shoot[0]][dot_shoot[1]] == 'üü¶':
            if self.field_2[dot_shoot[0]][dot_shoot[1]] == 'üö¢':
                self.field_1[dot_shoot[0]][dot_shoot[1]] = 'üí•'
                self.field_2[dot_shoot[0]][dot_shoot[1]] = 'üí•'
                return self.contour(None, 1)
            elif (self.field_2[dot_shoot[0]][dot_shoot[1]] == 'üö´') or (self.field_2[dot_shoot[0]][dot_shoot[1]] == 'üü¶'):
                self.field_1[dot_shoot[0]][dot_shoot[1]] = 'üö´'
                self.field_2[dot_shoot[0]][dot_shoot[1]] = 'üö´'
    def clean(self): # –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è
        self.field_2 = [["üü¶"] * self.size for _ in range(self.size)]
    def win(self): # –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–∏–≥—Ä—ã—à–∞
        for i in self.field_2:
            for j in i:
                if j == "üö¢":
                    return False
        return True
class Player:
    def __init__(self, f_sv, f_ch):
        self.f_sv = f_sv
        self.f_ch = f_ch
    def ask(self):
        pass
    def move(self):
        hod_dot = self.ask()
        if self.f_ch.shoot(hod_dot):
            return 1
class AI(Player):
    def ask(self):
        ask = [randint(0,5),randint(0,5)]
        return ask
class User(Player):
    def ask(self):
        while True:
            askx = int(input('–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É: '))
            asky = int(input('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É: '))
            if (askx in range(1,7)) and (asky in range(1,7)):
                ask = [askx - 1, asky - 1]
                return ask
class Game:
    def __init__(self):
        self.field_us = Board()
        self.field_ai = Board()
        self.us = User(self.field_us, self.field_ai)
        self.ai = AI(self.field_ai, self.field_us)
    def random_board(self, fld):
        ship_lengths = [3,2,2,1,1,1,1]
        while True:
            popitka = 0
            for i in ship_lengths:
                while popitka <= 4000:
                    popitka = popitka +1
                    try:
                        l = Ship(i, [randint(0,5),randint(0,5)], randint(0,1))
                        fld.add_ship(l.dots())
                    except BaseException:
                        pass
                    else:
                        break
          #  print(popitka)
            if popitka >= 4000:
                fld.clean()
            else:
                break
    def greet(self):
        print('''                          –ò–≥—Ä–∞ "–ú–æ—Ä—Å–∫–æ–π –ë–æ–π"
        –ò–≥—Ä–∞ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–∞ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º: –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫–∏ (–í—ã –∏ –ò–ò) –ø–æ –æ—á–µ—Ä–µ–¥–∏
        —É–∫–∞–∑—ã–≤–∞—é—Ç 2 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é) —è—á–µ–µ–∫ –≤ –∫–æ—Ç–æ—Ä—ã–µ 
        —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —Å—Ç—Ä–µ–ª—è—Ç—å. –ü—Ä–∏ —Å–≤–æ–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–º —Ö–æ–¥–µ –∏–≥—Ä–æ–∫, –ø–æ–ø–∞–≤—à–∏–π –≤ –∫–æ—Ä–∞–±–ª—å, 
        –ø–æ–ª—É—á–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ö–æ–¥. –í—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–µ—Ä–≤—ã–º —É–Ω–∏—á—Ç–æ–∂–∏—Ç –≤—Å–µ 
        –∫–æ—Ä–∞–±–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!
        –û–±–æ–∑–Ω–∞—á–µ–Ω–∏—è:
        üü¶ - –Ω–µ –∑–∞–Ω—è—Ç–∞—è –ª–∏–±–æ —Å–∫—Ä—ã—Ç–∞—è —è—á–µ–π–∫–∞
        üö´ - –ø—Ä–æ–º–∞—Ö –ª–∏–±–æ —è—á–µ–π–∫–∞ –≤ –∫–æ—Ç–æ—Ä—É—é –Ω–µ–ª—å–∑—è —Å—Ç—Ä–µ–ª—è—Ç—å 
        üö¢ - –∫–æ—Ä–∞–±–ª—å
        üí• - –ø–æ–¥–±–∏—Ç—ã–π –∫–æ—Ä–∞–±–ª—å 
        ''')
    def loop(self):
        self.random_board(self.field_us)
        self.random_board(self.field_ai)
        while True:
            print('----------–ú–û–Ø –î–û–°–ö–ê-----------------')
            self.field_us.board_consol(0)
            print('----------–î–û–°–ö–ê –ò–ò------------------')
            self.field_ai.board_consol(1)
            per = True
            while per:
                try:
                    while True:
                        if self.us.move():
                            if self.field_ai.win():
                                print('----------–ú–û–Ø –î–û–°–ö–ê-----------------')
                                self.field_us.board_consol(0)
                                print('----------–î–û–°–ö–ê –ò–ò------------------')
                                self.field_ai.board_consol(0)
                                print('–í—ã –ø–æ–±–µ–¥–∏–ª–∏!')
                                return 1
                            #    break
                            print('----------–ú–û–Ø –î–û–°–ö–ê-----------------')
                            self.field_us.board_consol(0)
                            print('----------–î–û–°–ö–ê –ò–ò------------------')
                            self.field_ai.board_consol(1)

                        else:
                            break
                except (BaseException) as e:
                    print(e)
                else:
                    per = False
            per = True
            while per:
                try:
                    while True:
                        if self.ai.move():
                            if self.field_us.win():
                                print('----------–ú–û–Ø –î–û–°–ö–ê-----------------')
                                self.field_us.board_consol(0)
                                print('----------–î–û–°–ö–ê –ò–ò------------------')
                                self.field_ai.board_consol(0)
                                print('–ü–æ–±–µ–¥–∏–ª –ò–ò :(')
                                return 1
                        else:
                            break
                except BaseException:
                    pass
                else:
                    per = False
    def start(self):
        self.greet()
        self.loop()
g = Game()
g.start()



#kikikuku—Éaue